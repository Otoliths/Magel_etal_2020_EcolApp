ki_fish_sum$AB_plank <- ki_AB_plank$AB_plank[match(ki_fish_sum$dso, ki_AB_plank$dso)]
ki_fish_sum$SR_total <- ki_SR$SR_total[match(ki_fish_sum$dso, ki_SR$dso)]
# Assign a value of 0 to any NA values
ki_fish_sum[is.na(ki_fish_sum)] <- 0
# Check for NA values anywhere in the data frame
any(is.na(ki_fish_sum))
# Remove 'dso' from data frame
ki_fish_sum$dso <- NULL
## Save and quit
save(ki_fish_sum, file = "KI_fish_data_sum.Rdata")
library(dplyr)
library(lme4)
library(arm)
library(optimx)
library(glmmADMB)
gammadd <- function(x) {
ifelse(x > 0, x, x + 0.5*min(x[x > 0]))
}
## All fish
model1b <- glmer(BM_total ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa"))
plot(fitted(model1b), resid(model1b))
summary(model1b)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
View(ki_fish_sum)
load("../Data/KI_UVC_11_13_15_17_poly_sum.Rdata")
load("../Data/KI_UVC_11_13_15_17_BM_poly_sum.Rdata")
waves_prod <- read.csv("../Data/KI_wave_prod_data_SESYNC.csv", stringsAsFactors = FALSE)
# Load necessary packages
library(glmmADMB)
library(dplyr)
library(lme4)
library(arm)
library(kableExtra)
library(optimx)
library(lunar)
# Set seed for random processes
set.seed(9)
## Subset the data
sites <- c("2", "3", "5", "6", "8", "10", "14", "15", "19", "25", "27", "30", "32", "34", "35", "38")
ki_fish <- filter(ki_fish, Site %in% sites)
ki_fish_BM <- filter(ki_fish_BM, Site %in% sites)
## Add SESYNC productivity data
ki_fish$npp_max <- waves_prod$npp_max[match(ki_fish$Site, waves_prod$Site)]
ki_fish_BM$npp_max <- waves_prod$npp_max[match(ki_fish_BM$Site, waves_prod$Site)]
# Rescale continuous variables
ki_fish$fp.cont <- rescale(ki_fish$fp.cont)
ki_fish_BM$fp.cont <- rescale(ki_fish_BM$fp.cont)
ki_fish$npp_max_z <- rescale(ki_fish$npp_max)
ki_fish_BM$npp_max_z <- rescale(ki_fish_BM$npp_max)
ki_fish$time_poly <- rescale(ki_fish$time_poly)
ki_fish_BM$time_poly <- rescale(ki_fish_BM$time_poly)
# Drop levels for factor variables
ki_fish$Observer <- droplevels(ki_fish$Observer)
ki_fish_BM$Observer <- droplevels(ki_fish_BM$Observer)
ki_fish$Year <- droplevels(ki_fish$Year)
ki_fish_BM$Year <- droplevels(ki_fish_BM$Year)
## Add lunar phase variable to dataset
# Convert 'KI.Date' to date format
ki_fish$lunar.date <- as.Date(ki_fish$KI.Date, "%d_%m_%Y")
ki_fish_BM$lunar.date <- as.Date(ki_fish_BM$KI.Date, "%d_%m_%Y")
# Create lunar phase variable
ki_fish$lunar.phase <- lunar.phase(ki_fish$lunar.date)
ki_fish_BM$lunar.phase <- lunar.phase(ki_fish_BM$lunar.date)
# Convert radians to lunar day
ki_fish$lunar.day <- ki_fish$lunar.phase*((3*pi)/2)
ki_fish_BM$lunar.day <- ki_fish_BM$lunar.phase*((3*pi)/2)
# Create sine variable
ki_fish$lunar.sine <- sin(ki_fish$lunar.day)
ki_fish_BM$lunar.sine <- sin(ki_fish_BM$lunar.day)
# Standardize lunar day variable
ki_fish$lunar.sine.x <- rescale(ki_fish$lunar.sine)
ki_fish_BM$lunar.sine.x <- rescale(ki_fish_BM$lunar.sine)
# Load necessary packages
library(dplyr)
View(ki_fish_BM)
setwd("C:/Users/jennm/Documents/GitRepos/Magel_etal_2020/data")
# Load the data
load("KI_fish_data_raw.Rdata")
View(ki_full)
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create a separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
##############################
# Calculate site-level sums for reef fish biomass, abundance, and species richness (values for each observer remain separate)
###############
### BIOMASS ###
###############
# Note that summed values are divided by 300 to give biomass in units of g/m^2
## Total biomass
ki_BM <- ki_full %>% group_by(heat, year, ki.date, site, observer, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z) %>%
summarise(BM_total = sum(biomass)/300)
# Note that fp.cont.z, and npp.max.z both map to site, while time.poly.z and lunar.sine.z map to the combination of ki.date
# and site; these variables are included in the above calculation to ensure that they are retained in the final dataset,
# but are excluded from subsequent calculations for the sake of simplicity
## Functional group biomass
# Corallivores
ki_BM_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_coral = sum(biomass)/300)
# Detritivores
ki_BM_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_det = sum(biomass)/300)
# Generalist carnivores
ki_BM_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_gen = sum(biomass)/300)
# Herbivores
ki_BM_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_herb = sum(biomass)/300)
# Invertivores
ki_BM_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_inv = sum(biomass)/300)
# Omnivores
ki_BM_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_omn = sum(biomass)/300)
# Piscivores
ki_BM_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_pisc = sum(biomass)/300)
# Planktivores
ki_BM_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_plank = sum(biomass)/300)
#################
### ABUNDANCE ###
#################
## Total abundance
ki_AB <- ki_full %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_total = sum(number))
## Functional group abundance
# Corallivores
ki_AB_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_coral = sum(number))
# Detritivores
ki_AB_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_det = sum(number))
# Generalist carnivores
ki_AB_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_gen = sum(number))
# Herbivores
ki_AB_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_herb = sum(number))
# Invertivores
ki_AB_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_inv = sum(number))
# Omnivores
ki_AB_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_omn = sum(number))
# Piscivores
ki_AB_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_pisc = sum(number))
# Planktivores
ki_AB_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_plank = sum(number))
########################
### species RICHNESS ###
########################
# Remove observations that were not identified to species level
ki_full_SR <- ki_full
ki_full_SR <- ki_full_SR[!grepl("Acanthurus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Blenniidae sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Chlorurus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Cirripectes sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Epinephelus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Gymnothorax sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Halichoeres sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Kyphosus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Parapercis sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pervagor sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Plagiotremus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pseudanthias sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Ptereleotris sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterocaesio sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterois sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Scarus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Synodus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Valenciennea sp.", ki_full_SR$species), ]
# Total species richness
ki_SR <- ki_full_SR %>% group_by(heat, year, ki.date, site, observer) %>% summarise(SR_total = n_distinct(species))
##############################
## Combine calculated values into a single data frame
# Rename the ki_BM data frame
ki_fish_sum <- ki_BM
# Create a unique identifier by combining the site, date, and observer values for each row
ki_fish_sum$dso <- paste(ki_fish_sum$site, ki_fish_sum$ki.date, ki_fish_sum$observer, sep = "-")
ki_BM_coral$dso <- paste(ki_BM_coral$site, ki_BM_coral$ki.date, ki_BM_coral$observer, sep = "-")
ki_BM_det$dso <- paste(ki_BM_det$site, ki_BM_det$ki.date, ki_BM_det$observer, sep = "-")
ki_BM_gen$dso <- paste(ki_BM_gen$site, ki_BM_gen$ki.date, ki_BM_gen$observer, sep = "-")
ki_BM_herb$dso <- paste(ki_BM_herb$site, ki_BM_herb$ki.date, ki_BM_herb$observer, sep = "-")
ki_BM_inv$dso <- paste(ki_BM_inv$site, ki_BM_inv$ki.date, ki_BM_inv$observer, sep = "-")
ki_BM_omn$dso <- paste(ki_BM_omn$site, ki_BM_omn$ki.date, ki_BM_omn$observer, sep = "-")
ki_BM_pisc$dso <- paste(ki_BM_pisc$site, ki_BM_pisc$ki.date, ki_BM_pisc$observer, sep = "-")
ki_BM_plank$dso <- paste(ki_BM_plank$site, ki_BM_plank$ki.date, ki_BM_plank$observer, sep = "-")
ki_AB$dso <- paste(ki_AB$site, ki_AB$ki.date, ki_AB$observer, sep = "-")
ki_AB_coral$dso <- paste(ki_AB_coral$site, ki_AB_coral$ki.date, ki_AB_coral$observer, sep = "-")
ki_AB_det$dso <- paste(ki_AB_det$site, ki_AB_det$ki.date, ki_AB_det$observer, sep = "-")
ki_AB_gen$dso <- paste(ki_AB_gen$site, ki_AB_gen$ki.date, ki_AB_gen$observer, sep = "-")
ki_AB_herb$dso <- paste(ki_AB_herb$site, ki_AB_herb$ki.date, ki_AB_herb$observer, sep = "-")
ki_AB_inv$dso <- paste(ki_AB_inv$site, ki_AB_inv$ki.date, ki_AB_inv$observer, sep = "-")
ki_AB_omn$dso <- paste(ki_AB_omn$site, ki_AB_omn$ki.date, ki_AB_omn$observer, sep = "-")
ki_AB_pisc$dso <- paste(ki_AB_pisc$site, ki_AB_pisc$ki.date, ki_AB_pisc$observer, sep = "-")
ki_AB_plank$dso <- paste(ki_AB_plank$site, ki_AB_plank$ki.date, ki_AB_plank$observer, sep = "-")
ki_SR$dso <- paste(ki_SR$site, ki_SR$ki.date, ki_SR$observer, sep = "-")
# Combine values into single data frame using 'match' function
ki_fish_sum$BM_coral <- ki_BM_coral$BM_coral[match(ki_fish_sum$dso, ki_BM_coral$dso)]
ki_fish_sum$BM_det <- ki_BM_det$BM_det[match(ki_fish_sum$dso, ki_BM_det$dso)]
ki_fish_sum$BM_gen <- ki_BM_gen$BM_gen[match(ki_fish_sum$dso, ki_BM_gen$dso)]
ki_fish_sum$BM_herb <- ki_BM_herb$BM_herb[match(ki_fish_sum$dso, ki_BM_herb$dso)]
ki_fish_sum$BM_inv <- ki_BM_inv$BM_inv[match(ki_fish_sum$dso, ki_BM_inv$dso)]
ki_fish_sum$BM_omn <- ki_BM_omn$BM_omn[match(ki_fish_sum$dso, ki_BM_omn$dso)]
ki_fish_sum$BM_pisc <- ki_BM_pisc$BM_pisc[match(ki_fish_sum$dso, ki_BM_pisc$dso)]
ki_fish_sum$BM_plank <- ki_BM_plank$BM_plank[match(ki_fish_sum$dso, ki_BM_plank$dso)]
ki_fish_sum$AB_total <- ki_AB$AB_total[match(ki_fish_sum$dso, ki_AB$dso)]
ki_fish_sum$AB_coral <- ki_AB_coral$AB_coral[match(ki_fish_sum$dso, ki_AB_coral$dso)]
ki_fish_sum$AB_det <- ki_AB_det$AB_det[match(ki_fish_sum$dso, ki_AB_det$dso)]
ki_fish_sum$AB_gen <- ki_AB_gen$AB_gen[match(ki_fish_sum$dso, ki_AB_gen$dso)]
ki_fish_sum$AB_herb <- ki_AB_herb$AB_herb[match(ki_fish_sum$dso, ki_AB_herb$dso)]
ki_fish_sum$AB_inv <- ki_AB_inv$AB_inv[match(ki_fish_sum$dso, ki_AB_inv$dso)]
ki_fish_sum$AB_omn <- ki_AB_omn$AB_omn[match(ki_fish_sum$dso, ki_AB_omn$dso)]
ki_fish_sum$AB_pisc <- ki_AB_pisc$AB_pisc[match(ki_fish_sum$dso, ki_AB_pisc$dso)]
ki_fish_sum$AB_plank <- ki_AB_plank$AB_plank[match(ki_fish_sum$dso, ki_AB_plank$dso)]
ki_fish_sum$SR_total <- ki_SR$SR_total[match(ki_fish_sum$dso, ki_SR$dso)]
# Assign a value of 0 to any NA values
ki_fish_sum[is.na(ki_fish_sum)] <- 0
# Check for NA values anywhere in the data frame
any(is.na(ki_fish_sum))
# Remove 'dso' from data frame
ki_fish_sum$dso <- NULL
## Save and quit
save(ki_fish_sum, file = "KI_fish_data_sum.Rdata")
library(dplyr)
library(lme4)
library(arm)
library(optimx)
library(glmmADMB)
setwd("C:/Users/jennm/Documents/GitRepos/Magel_etal_2020/data")
## Load the data
load("ki_fish_data_sum.Rdata")
View(ki_fish_sum)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
model1b <- glmer(BM_total ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa"))
plot(fitted(model1b), resid(model1b))
summary(model1b)
model3a <- glmmadmb(AB_det ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model3a), resid(model3a))
summary(model3a)
# Zero-inflated model
model3az <- glmmadmb(AB_det ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model3az), resid(model3az))
summary(model3az)
# Compare fit with AIC
AIC(model3a, model3az)
gammadd <- function(x) {
ifelse(x > 0, x, x + 0.5*min(x[x > 0]))
}
model5b <- glmer(BM_herb ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa"))
plot(fitted(model5b), resid(model5b))
summary(model5b)
summary(model2a)
# Load necessary packages
library(reshape)
setwd("C:/Users/jennm/Documents/GitRepos/Magel_etal_2020/data")
# Load the data
load("KI_fish_data_raw.Rdata")
ki_small <- ki_fish[ki_fish$length < 20, ]
ki_large <- ki_fish[ki_fish$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_fish <- rbind(ki_small, ki_large)
# Calculate biomass
ki_fish$biomass <- ki_fish$number * ki_fish$mass
# Create separate data frame for each functional group
ki_coral <- ki_fish[ki_fish$trophic == "Corallivore", ]
ki_det <- ki_fish[ki_fish$trophic == "Detritivore", ]
ki_gen <- ki_fish[ki_fish$trophic == "Generalist carnivore", ]
ki_herb <- ki_fish[ki_fish$trophic == "Herbivore", ]
ki_inv <- ki_fish[ki_fish$trophic == "Invertivore", ]
ki_omn <- ki_fish[ki_fish$trophic == "Omnivore", ]
ki_pisc <- ki_fish[ki_fish$trophic == "Piscivore", ]
ki_plank <- ki_fish[ki_fish$trophic == "Planktivore", ]
# Check that no data was lost
dim(ki_fish)[1]; dim(ki_coral)[1] + dim(ki_det)[1] + dim(ki_gen)[1] + dim(ki_herb)[1] + dim(ki_inv)[1] + dim(ki_omn)[1] + dim(ki_pisc)[1] + dim(ki_plank)[1]
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
# Check that no data was lost
dim(ki_full)[1]; dim(ki_coral)[1] + dim(ki_det)[1] + dim(ki_gen)[1] + dim(ki_herb)[1] + dim(ki_inv)[1] + dim(ki_omn)[1] + dim(ki_pisc)[1] + dim(ki_plank)[1]
View(ki_full)
load("../Data/Ordination/SS_BM_full.Rdata")
load("../Data/Ordination/SS_BM_coral.Rdata")
load("../Data/Ordination/SS_BM_det.Rdata")
load("../Data/Ordination/SS_BM_gen.Rdata")
load("../Data/Ordination/SS_BM_herb.Rdata")
load("../Data/Ordination/SS_BM_inv.Rdata")
load("../Data/Ordination/SS_BM_omn.Rdata")
load("../Data/Ordination/SS_BM_pisc.Rdata")
load("../Data/Ordination/SS_BM_plank.Rdata")
# Load environmental data
load("../Data/Ordination/SS_BM_full_meta.Rdata")
load("../Data/Ordination/SS_BM_coral_meta.Rdata")
load("../Data/Ordination/SS_BM_det_meta.Rdata")
load("../Data/Ordination/SS_BM_gen_meta.Rdata")
load("../Data/Ordination/SS_BM_herb_meta.Rdata")
load("../Data/Ordination/SS_BM_inv_meta.Rdata")
load("../Data/Ordination/SS_BM_omn_meta.Rdata")
load("../Data/Ordination/SS_BM_pisc_meta.Rdata")
load("../Data/Ordination/SS_BM_plank_meta.Rdata")
# Load necessary packages
library(vegan)
# Set seed for random processes
set.seed(9)
View(site.sp.full.meta)
View(site.sp.full)
View(site.sp.full.meta)
# Load necessary packages
library(reshape)
setwd("C:/Users/jennm/Documents/GitRepos/Magel_etal_2020/data")
load("ki_full_data_raw.Rdata")
## Additional data cleaning
# Double number of small fish to account for smaller survey area (300m^2 compared to 600m^2 for large fish))
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
# Check that no data was lost
dim(ki_full)[1]; dim(ki_coral)[1] + dim(ki_det)[1] + dim(ki_gen)[1] + dim(ki_herb)[1] + dim(ki_inv)[1] + dim(ki_omn)[1] + dim(ki_pisc)[1] + dim(ki_plank)[1]
##############################
# Load the data
load("ki_fish_data_raw.Rdata")
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
# Check that no data was lost
dim(ki_full)[1]; dim(ki_coral)[1] + dim(ki_det)[1] + dim(ki_gen)[1] + dim(ki_herb)[1] + dim(ki_inv)[1] + dim(ki_omn)[1] + dim(ki_pisc)[1] + dim(ki_plank)[1]
ki_BM <- ki_full %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.full <- cast(ki_BM, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.full <- as.data.frame(ss.full)
ss.full[is.na(ss.full)] <- 0
View(ss.full)
ss.full.meta <- ss.full[, c(1:8)]
ss.full <- ss.full[, c(9:266)]
ki_BM_coral <- ki_coral %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.coral <- cast(ki_BM_coral, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z~ species,
value = "biomass", FUN = sum)
ss.coral <- as.data.frame(ss.coral)
ss.coral[is.na(ss.coral)] <- 0
ss.coral.meta <- ss.coral[, c(1:8)]
ss.coral <- ss.coral[, c(9:28)]
ki_BM_det <- ki_det %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.det <- cast(ki_BM_det, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z~ species,
value = "biomass", FUN = sum)
ss.det <- as.data.frame(ss.det)
ss.det[is.na(ss.det)] <- 0
ss.det.meta <- ss.det[, c(1:8)]
ss.det <- ss.det[, c(9:14)]
ki_BM_gen <- ki_gen %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.gen <- cast(ki_BM_gen, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.gen <- as.data.frame(ss.gen)
ss.gen[is.na(ss.gen)] <- 0
ss.gen.meta <- ss.gen[, c(1:8)]
ss.gen <- ss.gen[, c(9:30)]
ki_BM_herb <- ki_herb %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.herb <- cast(ki_BM_herb, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.herb <- as.data.frame(ss.herb)
ss.herb[is.na(ss.herb)] <- 0
ss.herb.meta <- ss.herb[, c(1:8)]
ss.herb <- ss.herb[, c(9:53)]
ki_BM_inv <- ki_inv %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.inv <- cast(ki_BM_inv, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.inv <- as.data.frame(ss.inv)
ss.inv[is.na(ss.inv)] <- 0
ss.inv.meta <- ss.inv[, c(1:8)]
ss.inv <- ss.inv[, c(9:74)]
ki_BM_omn <- ki_omn %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.omn <- cast(ki_BM_omn, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.omn <- as.data.frame(ss.omn)
ss.omn[is.na(ss.omn)] <- 0
ss.omn.meta <- ss.omn[, c(1:8)]
ss.omn <- ss.omn[, c(9:24)]
ki_BM_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.pisc <- cast(ki_BM_pisc, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.pisc <- as.data.frame(ss.pisc)
ss.pisc[is.na(ss.pisc)] <- 0
ss.pisc.meta <- ss.pisc[, c(1:8)]
ss.pisc <- ss.pisc[, c(9:49)]
ki_BM_plank <- ki_plank %>% group_by(heat, year, ki.date, site, fp.cont.z, npp.max.z, time.poly.z, lunar.sine.z, species) %>%
summarise(biomass = sum(biomass)/300)
## Cast data into a site x species matrix
ss.plank <- cast(ki_BM_plank, heat + year + ki.date + site + fp.cont.z + npp.max.z + time.poly.z + lunar.sine.z ~ species,
value = "biomass", FUN = sum)
ss.plank <- as.data.frame(ss.plank)
ss.plank[is.na(ss.plank)] <- 0
ss.plank.meta <- ss.plank[, c(1:8)]
ss.plank <- ss.plank[, c(9:50)]
save(ss.full, file = "multivariate/SS_full.Rdata")
save(ss.full.meta, file = "multivariate/SS_full_meta.Rdata")
# Corallivores
save(ss.coral, file = "multivariate/SS_coral.Rdata")
save(ss.coral.meta, file = "multivariate/SS_coral_meta.Rdata")
# Detritivores
save(ss.det, file = "multivariate/SS_det.Rdata")
save(ss.det.meta, file = "multivariate/SS_det_meta.Rdata")
# Generalist carnivores
save(ss.gen, file = "multivariate/SS_gen.Rdata")
save(ss.gen.meta, file = "multivariate/SS_gen_meta.Rdata")
# Herbivores
save(ss.herb, file = "multivariate/SS_herb.Rdata")
save(ss.herb.meta, file = "multivariate/SS_herb_meta.Rdata")
# Invertivores
save(ss.inv, file = "multivariate/SS_inv.Rdata")
save(ss.inv.meta, file = "multivariate/SS_inv_meta.Rdata")
# Omnivores
save(ss.omn, file = "multivariate/SS_omn.Rdata")
save(ss.omn.meta, file = "multivariate/SS_omn_meta.Rdata")
# Piscivores
save(ss.pisc, file = "multivariate/SS_pisc.Rdata")
save(ss.pisc.meta, file = "multivariate/SS_pisc_meta.Rdata")
# Planktivores
save(ss.plank, file = "multivariate/SS_plank.Rdata")
save(ss.plank.meta, file = "multivariate/SS_plank_meta.Rdata")
adonis(ss.full ~ npp.max.z + poly(time.poly.z, 2) + lunar.sine.z + heat * fp.cont.z, data = ss.full.meta,
permutations = 999, method = "bray", strata = ss.full.meta$Site)
adonis(ss.full ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z, data = ss.full.meta,
permutations = 999, method = "bray", strata = ss.full.meta$Site)
adonis(ss.omn ~ heat * fp.cont.z + npp.max.z + poly(time.poly.z, 2) + lunar.sine.z, data = ss.omn.meta,
permutations = 999, method = "bray", strata = ss.omn.meta$Site)

sites <- read.csv("ki_sites_RT_updatedFP.csv")
head(sites)
ki_full$f.pressure <- factor(sites$f.pressure[match(ki_full$Site, sites$site)])
### Fix dates
ki_full$KI.Date[ki_full$KI.Date == "21.08.2011"] <- "21_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "23.07.2011"] <- "23_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "24.07.2011"] <- "24_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "25.07.2011"] <- "25_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "27.07.2011"] <- "27_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "28.07.2011"] <- "28_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "29.07.2011"] <- "29_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "29.08.2011"] <- "29_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "30.07.2011"] <- "30_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "31.07.2011"] <- "31_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "01.08.2011"] <- "01_08_2011"
ki_full$KI.Date[ki_full$KI.Date == "23/07/11"] <- "23_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "24/07/11"] <- "24_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "25/07/11"] <- "25_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "27/07/11"] <- "27_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "28/07/11"] <- "28_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "29/07/11"] <- "29_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "30/07/11"] <- "30_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "31/07/11"] <- "31_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "01/08/11"] <- "01_08_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2023"] <- "23_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2024"] <- "24_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2025"] <- "25_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2026"] <- "26_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2027"] <- "27_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2028"] <- "28_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/2029"] <- "29_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/1930"] <- "30_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "7/11/1931"] <- "31_07_2011"
ki_full$KI.Date[ki_full$KI.Date == "8/11/2001"] <- "01_08_2011"
ki_full$KI.Date[ki_full$KI.Date == "21_07_13"] <- "21_07_2013"
ki_full$KI.Date[ki_full$KI.Date == "22_07_13"] <- "22_07_2013"
ki_full$KI.Date[ki_full$KI.Date == "24_07_13"] <- "24_07_2013"
ki_full$KI.Date[ki_full$KI.Date == "25_07_13"] <- "25_07_2013"
ki_full$KI.Date[ki_full$KI.Date == "4_07_2015"] <- "04_07_2015"
ki_full$KI.Date[ki_full$KI.Date == "5_07_2015"] <- "05_07_2015"
ki_full$KI.Date[ki_full$KI.Date == " 06_07_2015"] <- "06_07_2015"
unique(ki_full$KI.Date)
### Create unique codes for each date/site/transect combo
ki_full$unique.site <- paste(ki_full$KI.Date, ki_full$Transect, ki_full$Site, sep = "_")
unique(ki_full$unique.site)
### Clean survey times
unique(ki_full$Time)
library(stringr)
ki_full$time_hx <- str_split_fixed(ki_full$Time, ":", 2)[,1]
ki_full$time_mx <- str_split_fixed(ki_full$Time, ":", 2)[,2]
ki_full$survey_time <- paste(ki_full$time_hx, ki_full$time_mx, sep = "")
ki_full <- ki_full[order(ki_full$survey_time), ]
unique(ki_full$survey_time)
ki_full$survey_time[ki_full$survey_time == "121"] <- "1321"
ki_full$survey_time[ki_full$survey_time == "1558:00"] <- "1558"
ki_full$survey_time <- as.numeric(ki_full$survey_time)
ki_full$time_m <- substr(ki_full$survey_time, nchar(ki_full$survey_time)-1, nchar(ki_full$survey_time))
ki_full$time_h <- substr(ki_full$survey_time, nchar(ki_full$survey_time)-3, nchar(ki_full$survey_time)-2)
ki_full$survey_time_p <- paste(ki_full$time_h, ki_full$time_m, sep = ":")
# Assign to time-of-day categories
ki_full$time_of_day <- NULL
ki_full$time_of_day[ki_full$survey_time < 930] <- "MORN"
ki_full$time_of_day[ki_full$survey_time >= 930 & ki_full$survey_time < 1230] <- "MID"
ki_full$time_of_day[ki_full$survey_time >= 1230 & ki_full$survey_time < 1530] <- "AFT"
ki_full$time_of_day[ki_full$survey_time >= 1530] <- "LATE"
dim(ki_full[is.na(ki_full$time_of_day), ])
## Remove surveys from 2017 where only 2 transects were completed (site surveyed twice on the same day)
ki_full <- ki_full[!(ki_full$KI.Date == "29_07_2017" & ki_full$Site == "15" & ki_full$time_of_day == "MID"), ]
### Get variables in the correct class
head(ki_full)
str(ki_full)
ki_full$Site <- as.factor(ki_full$Site)
ki_full$Observer <- as.factor(ki_full$Observer)
ki_full$Transect <- as.factor(ki_full$Transect)
ki_full$Year <- as.factor(ki_full$Year)
ki_full$f.pressure <- as.factor(ki_full$f.pressure)
library(dplyr)
source("../Scripts/KI_fish_clean_extra_poly_JM.R")
ki_full$Species.Code <- NULL
ki_full$Depth <- NULL
ki_full$Slope <- NULL
ki_full$Note <- NULL
ki_full$Family <- NULL
ki_full$CoarseFG <- NULL
ki_full$FineFG <- NULL
ki_full$unique.site <- NULL
ki_full$time_mx <- NULL
ki_full$time_hx <- NULL
ki_full$survey_time <- NULL
ki_full$time_m <- NULL
ki_full$time_h <- NULL
ki_full$survey_time_p <- NULL
ki_full$time_of_day <- NULL
ki_full$site.date <- NULL
ki_full$Time <- NULL
names(ki_full)[names(ki_full) == "KI.Date"] <- "ki.date"
names(ki_full)[names(ki_full) == "Species"] <- "species"
names(ki_full)[names(ki_full) == "Trophic"] <- "trophic"
names(ki_full)[names(ki_full) == "Size..cm."] <- "size"
names(ki_full)[names(ki_full) == "Number"] <- "number"
names(ki_full)[names(ki_full) == "LENGTH_CONVERSION_FACTOR"] <- "lcf"
names(ki_full)[names(ki_full) == "MASS"] <- "mass"
names(ki_full)[names(ki_full) == "time_first"] <- "survey_time"
str(ki_full)
names(ki_full)[names(ki_full) == "Site"] <- "site"
names(ki_full)[names(ki_full) == "Observer"] <- "observer"
names(ki_full)[names(ki_full) == "Transect"] <- "transect"
names(ki_full)[names(ki_full) == "Year"] <- "year"
str(ki_full)
# Reorder columns
ki_full <- ki_full[, c(1,8,2,4,3,5,16,6,7,9:13,15,14,19,18)]
View(ki_full)
ki_full$time.poly <- sapply(strsplit(as.character(ki_full$survey_time),":"),
function(x) {
x <- as.numeric(x)
x[1] + x[2]/60
}
)
## Add continuous f.pressure data to dataframe
sites <- read.csv("KI_Sites_Sept2019.csv", header = TRUE, stringsAsFactors = FALSE)
ki_full$fp.cont <- sites$continous.pressure.2km[match(ki_full$site, sites$Ã¯..site)]
sum(is.na(ki_full$fp.cont))
## Reorder columns
ki_full <- ki_full[, c(1:16,20,17,19,18)]
View(ki_full)
waves_prod <- read.csv("../Data/KI_wave_prod_data_SESYNC.csv", stringsAsFactors = FALSE)
ki_full$npp.max <- waves_prod$npp_max[match(ki_full$site, waves_prod$Site)]
## Add lunar data
library(lunar)
library(arm)
# Convert 'KI.Date' to date format
ki_full$lunar.date <- as.Date(ki_full$ki.date, "%d_%m_%Y")
# Create lunar phase variable
ki_full$lunar.phase <- lunar.phase(ki_full$lunar.date)
# Convert radians to lunar day
ki_full$lunar.day <- ki_full$lunar.phase*((3*pi)/2)
# Create sine variable
ki_full$lunar.sine <- sin(ki_full$lunar.day)
# Standardize lunar day variable
ki_full$lunar.sine.z <- rescale(ki_full$lunar.sine)
ki_full$lunar.date <- NULL
ki_full$lunar.phase <- NULL
ki_full$lunar.sine.x <- NULL
ki_full$fp.cont.z <- rescale(ki_full$fp.cont)
ki_full$npp.max.z <- rescale(ki_full$npp.max)
## Reorder variables
ki_full <- ki_full[, c(1:17,25,21,26,18,19,27,22:24)]
## Filter sites
sites <- c("2", "3", "5", "6", "8", "10", "14", "15", "19", "25", "27", "30", "32", "34", "35", "38")
ki_full <- filter(ki_full, site %in% sites)
View(ki_full)
## Reorder variables
ki_full <- ki_full[, c(1:17,25,21,26,18,19,22:24)]
### Save and quit
save(ki_full, file = "KI_fish_data_raw.Rdata")
setwd("C:/Users/jennm/Documents/GitRepos/Magel_etal_2020/data")
# Load necessary packages
library(dplyr)
# Load the data
load("KI_fish_data_raw.Rdata")
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create a separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
##############################
# Calculate site-level sums for reef fish biomass, abundance, and species richness (values for each observer remain separate)
###############
### BIOMASS ###
###############
# Note that summed values are divided by 300 to give biomass in units of g/m^2
## Total biomass
ki_BM <- ki_full %>% group_by(heat, year, ki.date, site, observer, fp.cont.z, npp.max.z, time.poly, lunar.sine.z) %>%
summarise(BM_total = sum(biomass)/300)
# Note that fp.cont.z, and npp.max.z both map to site, while time.poly and lunar.sine.z map to the combination of ki.date
# and site; these variables are included in the above calculation to ensure that they are retained in the final dataset,
# but are excluded from subsequent calculations for the sake of simplicity
## Functional group biomass
# Corallivores
ki_BM_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_coral = sum(biomass)/300)
# Detritivores
ki_BM_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_det = sum(biomass)/300)
# Generalist carnivores
ki_BM_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_gen = sum(biomass)/300)
# Herbivores
ki_BM_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_herb = sum(biomass)/300)
# Invertivores
ki_BM_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_inv = sum(biomass)/300)
# Omnivores
ki_BM_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_omn = sum(biomass)/300)
# Piscivores
ki_BM_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_pisc = sum(biomass)/300)
# Planktivores
ki_BM_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_plank = sum(biomass)/300)
#################
### ABUNDANCE ###
#################
## Total abundance
ki_AB <- ki_full %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_total = sum(number))
## Functional group abundance
# Corallivores
ki_AB_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_coral = sum(number))
# Detritivores
ki_AB_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_det = sum(number))
# Generalist carnivores
ki_AB_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_gen = sum(number))
# Herbivores
ki_AB_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_herb = sum(number))
# Invertivores
ki_AB_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_inv = sum(number))
# Omnivores
ki_AB_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_omn = sum(number))
# Piscivores
ki_AB_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_pisc = sum(number))
# Planktivores
ki_AB_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_plank = sum(number))
########################
### species RICHNESS ###
########################
# Remove observations that were not identified to species level
ki_full_SR <- ki_full
ki_full_SR <- ki_full_SR[!grepl("Acanthurus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Blenniidae sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Chlorurus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Cirripectes sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Epinephelus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Gymnothorax sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Halichoeres sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Kyphosus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Parapercis sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pervagor sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Plagiotremus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pseudanthias sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Ptereleotris sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterocaesio sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterois sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Scarus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Synodus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Valenciennea sp.", ki_full_SR$species), ]
# Total species richness
ki_SR <- ki_full_SR %>% group_by(heat, year, ki.date, site, observer) %>% summarise(SR_total = n_distinct(species))
##############################
## Combine calculated values into a single data frame
# Rename the ki_BM data frame
ki_fish_sum <- ki_BM
# Create a unique identifier by combining the site, date, and observer values for each row
ki_fish_sum$dso <- paste(ki_fish_sum$site, ki_fish_sum$ki.date, ki_fish_sum$observer, sep = "-")
ki_BM_coral$dso <- paste(ki_BM_coral$site, ki_BM_coral$ki.date, ki_BM_coral$observer, sep = "-")
ki_BM_det$dso <- paste(ki_BM_det$site, ki_BM_det$ki.date, ki_BM_det$observer, sep = "-")
ki_BM_gen$dso <- paste(ki_BM_gen$site, ki_BM_gen$ki.date, ki_BM_gen$observer, sep = "-")
ki_BM_herb$dso <- paste(ki_BM_herb$site, ki_BM_herb$ki.date, ki_BM_herb$observer, sep = "-")
ki_BM_inv$dso <- paste(ki_BM_inv$site, ki_BM_inv$ki.date, ki_BM_inv$observer, sep = "-")
ki_BM_omn$dso <- paste(ki_BM_omn$site, ki_BM_omn$ki.date, ki_BM_omn$observer, sep = "-")
ki_BM_pisc$dso <- paste(ki_BM_pisc$site, ki_BM_pisc$ki.date, ki_BM_pisc$observer, sep = "-")
ki_BM_plank$dso <- paste(ki_BM_plank$site, ki_BM_plank$ki.date, ki_BM_plank$observer, sep = "-")
ki_AB$dso <- paste(ki_AB$site, ki_AB$ki.date, ki_AB$observer, sep = "-")
ki_AB_coral$dso <- paste(ki_AB_coral$site, ki_AB_coral$ki.date, ki_AB_coral$observer, sep = "-")
ki_AB_det$dso <- paste(ki_AB_det$site, ki_AB_det$ki.date, ki_AB_det$observer, sep = "-")
ki_AB_gen$dso <- paste(ki_AB_gen$site, ki_AB_gen$ki.date, ki_AB_gen$observer, sep = "-")
ki_AB_herb$dso <- paste(ki_AB_herb$site, ki_AB_herb$ki.date, ki_AB_herb$observer, sep = "-")
ki_AB_inv$dso <- paste(ki_AB_inv$site, ki_AB_inv$ki.date, ki_AB_inv$observer, sep = "-")
ki_AB_omn$dso <- paste(ki_AB_omn$site, ki_AB_omn$ki.date, ki_AB_omn$observer, sep = "-")
ki_AB_pisc$dso <- paste(ki_AB_pisc$site, ki_AB_pisc$ki.date, ki_AB_pisc$observer, sep = "-")
ki_AB_plank$dso <- paste(ki_AB_plank$site, ki_AB_plank$ki.date, ki_AB_plank$observer, sep = "-")
ki_SR$dso <- paste(ki_SR$site, ki_SR$ki.date, ki_SR$observer, sep = "-")
# Combine values into single data frame using 'match' function
ki_fish_sum$BM_coral <- ki_BM_coral$BM_coral[match(ki_fish_sum$dso, ki_BM_coral$dso)]
ki_fish_sum$BM_det <- ki_BM_det$BM_det[match(ki_fish_sum$dso, ki_BM_det$dso)]
ki_fish_sum$BM_gen <- ki_BM_gen$BM_gen[match(ki_fish_sum$dso, ki_BM_gen$dso)]
ki_fish_sum$BM_herb <- ki_BM_herb$BM_herb[match(ki_fish_sum$dso, ki_BM_herb$dso)]
ki_fish_sum$BM_inv <- ki_BM_inv$BM_inv[match(ki_fish_sum$dso, ki_BM_inv$dso)]
ki_fish_sum$BM_omn <- ki_BM_omn$BM_omn[match(ki_fish_sum$dso, ki_BM_omn$dso)]
ki_fish_sum$BM_pisc <- ki_BM_pisc$BM_pisc[match(ki_fish_sum$dso, ki_BM_pisc$dso)]
ki_fish_sum$BM_plank <- ki_BM_plank$BM_plank[match(ki_fish_sum$dso, ki_BM_plank$dso)]
ki_fish_sum$AB_total <- ki_AB$AB_total[match(ki_fish_sum$dso, ki_AB$dso)]
ki_fish_sum$AB_coral <- ki_AB_coral$AB_coral[match(ki_fish_sum$dso, ki_AB_coral$dso)]
ki_fish_sum$AB_det <- ki_AB_det$AB_det[match(ki_fish_sum$dso, ki_AB_det$dso)]
ki_fish_sum$AB_gen <- ki_AB_gen$AB_gen[match(ki_fish_sum$dso, ki_AB_gen$dso)]
ki_fish_sum$AB_herb <- ki_AB_herb$AB_herb[match(ki_fish_sum$dso, ki_AB_herb$dso)]
ki_fish_sum$AB_inv <- ki_AB_inv$AB_inv[match(ki_fish_sum$dso, ki_AB_inv$dso)]
ki_fish_sum$AB_omn <- ki_AB_omn$AB_omn[match(ki_fish_sum$dso, ki_AB_omn$dso)]
ki_fish_sum$AB_pisc <- ki_AB_pisc$AB_pisc[match(ki_fish_sum$dso, ki_AB_pisc$dso)]
ki_fish_sum$AB_plank <- ki_AB_plank$AB_plank[match(ki_fish_sum$dso, ki_AB_plank$dso)]
ki_fish_sum$SR_total <- ki_SR$SR_total[match(ki_fish_sum$dso, ki_SR$dso)]
# Assign a value of 0 to any NA values
ki_fish_sum[is.na(ki_fish_sum)] <- 0
# Check for NA values anywhere in the data frame
any(is.na(ki_fish_sum))
# Remove 'dso' from data frame
ki_fish_sum$dso <- NULL
View(ki_full)
(dplyr)
# Load necessary packages
library(dplyr)
load("KI_fish_data_raw.Rdata")
## Additional data cleaning
# Double number of small fish to account for smaller survey area (300m^2 compared to 600m^2 for large fish))
ki_small <- ki_full[ki_full$length < 20, ]
ki_large <- ki_full[ki_full$length >= 20, ]
ki_small$number <- ki_small$number*2
ki_full <- rbind(ki_small, ki_large)
# Calculate biomass
ki_full$biomass <- ki_full$number * ki_full$mass
# Create a separate data frame for each functional group
ki_coral <- ki_full[ki_full$trophic == "Corallivore", ]
ki_det <- ki_full[ki_full$trophic == "Detritivore", ]
ki_gen <- ki_full[ki_full$trophic == "Generalist carnivore", ]
ki_herb <- ki_full[ki_full$trophic == "Herbivore", ]
ki_inv <- ki_full[ki_full$trophic == "Invertivore", ]
ki_omn <- ki_full[ki_full$trophic == "Omnivore", ]
ki_pisc <- ki_full[ki_full$trophic == "Piscivore", ]
ki_plank <- ki_full[ki_full$trophic == "Planktivore", ]
##############################
# Calculate site-level sums for reef fish biomass, abundance, and species richness (values for each observer remain separate)
###############
### BIOMASS ###
###############
# Note that summed values are divided by 300 to give biomass in units of g/m^2
## Total biomass
ki_BM <- ki_full %>% group_by(heat, year, ki.date, site, observer, fp.cont.z, npp.max.z, time.poly, lunar.sine.z) %>%
summarise(BM_total = sum(biomass)/300)
# Note that fp.cont.z, and npp.max.z both map to site, while time.poly and lunar.sine.z map to the combination of ki.date
# and site; these variables are included in the above calculation to ensure that they are retained in the final dataset,
# but are excluded from subsequent calculations for the sake of simplicity
## Functional group biomass
# Corallivores
ki_BM_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_coral = sum(biomass)/300)
# Detritivores
ki_BM_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_det = sum(biomass)/300)
# Generalist carnivores
ki_BM_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_gen = sum(biomass)/300)
# Herbivores
ki_BM_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_herb = sum(biomass)/300)
# Invertivores
ki_BM_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_inv = sum(biomass)/300)
# Omnivores
ki_BM_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_omn = sum(biomass)/300)
# Piscivores
ki_BM_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_pisc = sum(biomass)/300)
# Planktivores
ki_BM_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(BM_plank = sum(biomass)/300)
#################
### ABUNDANCE ###
#################
## Total abundance
ki_AB <- ki_full %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_total = sum(number))
## Functional group abundance
# Corallivores
ki_AB_coral <- ki_coral %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_coral = sum(number))
# Detritivores
ki_AB_det <- ki_det %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_det = sum(number))
# Generalist carnivores
ki_AB_gen <- ki_gen %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_gen = sum(number))
# Herbivores
ki_AB_herb <- ki_herb %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_herb = sum(number))
# Invertivores
ki_AB_inv <- ki_inv %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_inv = sum(number))
# Omnivores
ki_AB_omn <- ki_omn %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_omn = sum(number))
# Piscivores
ki_AB_pisc <- ki_pisc %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_pisc = sum(number))
# Planktivores
ki_AB_plank <- ki_plank %>% group_by(heat, year, ki.date, site, observer) %>% summarise(AB_plank = sum(number))
########################
### species RICHNESS ###
########################
# Remove observations that were not identified to species level
ki_full_SR <- ki_full
ki_full_SR <- ki_full_SR[!grepl("Acanthurus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Blenniidae sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Chlorurus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Cirripectes sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Epinephelus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Gymnothorax sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Halichoeres sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Kyphosus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Parapercis sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pervagor sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Plagiotremus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pseudanthias sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Ptereleotris sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterocaesio sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Pterois sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Scarus sp", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Synodus sp.", ki_full_SR$species), ]
ki_full_SR <- ki_full_SR[!grepl("Valenciennea sp.", ki_full_SR$species), ]
# Total species richness
ki_SR <- ki_full_SR %>% group_by(heat, year, ki.date, site, observer) %>% summarise(SR_total = n_distinct(species))
##############################
## Combine calculated values into a single data frame
# Rename the ki_BM data frame
ki_fish_sum <- ki_BM
# Create a unique identifier by combining the site, date, and observer values for each row
ki_fish_sum$dso <- paste(ki_fish_sum$site, ki_fish_sum$ki.date, ki_fish_sum$observer, sep = "-")
ki_BM_coral$dso <- paste(ki_BM_coral$site, ki_BM_coral$ki.date, ki_BM_coral$observer, sep = "-")
ki_BM_det$dso <- paste(ki_BM_det$site, ki_BM_det$ki.date, ki_BM_det$observer, sep = "-")
ki_BM_gen$dso <- paste(ki_BM_gen$site, ki_BM_gen$ki.date, ki_BM_gen$observer, sep = "-")
ki_BM_herb$dso <- paste(ki_BM_herb$site, ki_BM_herb$ki.date, ki_BM_herb$observer, sep = "-")
ki_BM_inv$dso <- paste(ki_BM_inv$site, ki_BM_inv$ki.date, ki_BM_inv$observer, sep = "-")
ki_BM_omn$dso <- paste(ki_BM_omn$site, ki_BM_omn$ki.date, ki_BM_omn$observer, sep = "-")
ki_BM_pisc$dso <- paste(ki_BM_pisc$site, ki_BM_pisc$ki.date, ki_BM_pisc$observer, sep = "-")
ki_BM_plank$dso <- paste(ki_BM_plank$site, ki_BM_plank$ki.date, ki_BM_plank$observer, sep = "-")
ki_AB$dso <- paste(ki_AB$site, ki_AB$ki.date, ki_AB$observer, sep = "-")
ki_AB_coral$dso <- paste(ki_AB_coral$site, ki_AB_coral$ki.date, ki_AB_coral$observer, sep = "-")
ki_AB_det$dso <- paste(ki_AB_det$site, ki_AB_det$ki.date, ki_AB_det$observer, sep = "-")
ki_AB_gen$dso <- paste(ki_AB_gen$site, ki_AB_gen$ki.date, ki_AB_gen$observer, sep = "-")
ki_AB_herb$dso <- paste(ki_AB_herb$site, ki_AB_herb$ki.date, ki_AB_herb$observer, sep = "-")
ki_AB_inv$dso <- paste(ki_AB_inv$site, ki_AB_inv$ki.date, ki_AB_inv$observer, sep = "-")
ki_AB_omn$dso <- paste(ki_AB_omn$site, ki_AB_omn$ki.date, ki_AB_omn$observer, sep = "-")
ki_AB_pisc$dso <- paste(ki_AB_pisc$site, ki_AB_pisc$ki.date, ki_AB_pisc$observer, sep = "-")
ki_AB_plank$dso <- paste(ki_AB_plank$site, ki_AB_plank$ki.date, ki_AB_plank$observer, sep = "-")
ki_SR$dso <- paste(ki_SR$site, ki_SR$ki.date, ki_SR$observer, sep = "-")
# Combine values into single data frame using 'match' function
ki_fish_sum$BM_coral <- ki_BM_coral$BM_coral[match(ki_fish_sum$dso, ki_BM_coral$dso)]
ki_fish_sum$BM_det <- ki_BM_det$BM_det[match(ki_fish_sum$dso, ki_BM_det$dso)]
ki_fish_sum$BM_gen <- ki_BM_gen$BM_gen[match(ki_fish_sum$dso, ki_BM_gen$dso)]
ki_fish_sum$BM_herb <- ki_BM_herb$BM_herb[match(ki_fish_sum$dso, ki_BM_herb$dso)]
ki_fish_sum$BM_inv <- ki_BM_inv$BM_inv[match(ki_fish_sum$dso, ki_BM_inv$dso)]
ki_fish_sum$BM_omn <- ki_BM_omn$BM_omn[match(ki_fish_sum$dso, ki_BM_omn$dso)]
ki_fish_sum$BM_pisc <- ki_BM_pisc$BM_pisc[match(ki_fish_sum$dso, ki_BM_pisc$dso)]
ki_fish_sum$BM_plank <- ki_BM_plank$BM_plank[match(ki_fish_sum$dso, ki_BM_plank$dso)]
ki_fish_sum$AB_total <- ki_AB$AB_total[match(ki_fish_sum$dso, ki_AB$dso)]
ki_fish_sum$AB_coral <- ki_AB_coral$AB_coral[match(ki_fish_sum$dso, ki_AB_coral$dso)]
ki_fish_sum$AB_det <- ki_AB_det$AB_det[match(ki_fish_sum$dso, ki_AB_det$dso)]
ki_fish_sum$AB_gen <- ki_AB_gen$AB_gen[match(ki_fish_sum$dso, ki_AB_gen$dso)]
ki_fish_sum$AB_herb <- ki_AB_herb$AB_herb[match(ki_fish_sum$dso, ki_AB_herb$dso)]
ki_fish_sum$AB_inv <- ki_AB_inv$AB_inv[match(ki_fish_sum$dso, ki_AB_inv$dso)]
ki_fish_sum$AB_omn <- ki_AB_omn$AB_omn[match(ki_fish_sum$dso, ki_AB_omn$dso)]
ki_fish_sum$AB_pisc <- ki_AB_pisc$AB_pisc[match(ki_fish_sum$dso, ki_AB_pisc$dso)]
ki_fish_sum$AB_plank <- ki_AB_plank$AB_plank[match(ki_fish_sum$dso, ki_AB_plank$dso)]
ki_fish_sum$SR_total <- ki_SR$SR_total[match(ki_fish_sum$dso, ki_SR$dso)]
# Assign a value of 0 to any NA values
ki_fish_sum[is.na(ki_fish_sum)] <- 0
# Check for NA values anywhere in the data frame
any(is.na(ki_fish_sum))
# Remove 'dso' from data frame
ki_fish_sum$dso <- NULL
View(ki_fish_sum)
## Save and quit
save(ki_fish_sum, file = "KI_fish_data_sum.Rdata")
library(dplyr)
library(lme4)
library(arm)
library(optimx)
library(glmmADMB)
## Load the data
load("ki_fish_data_sum.Rdata")
View(ki_fish_sum)
## Calculate the number of non-zero observations for each trophic group
zeroes <- as.data.frame(colSums(ki_fish_sum[, c(11:18)] != 0))
View(zeroes)
gammadd <- function(x) {
ifelse(x > 0, x, x + 0.5*min(x[x > 0]))
}
View(ki_fish_sum)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time_poly, 2) + lunar.sine.x + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time_poly, 2) + lunar.sine.x + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.x + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.x + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
View(ki_fish_sum)
model2a <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model2a), resid(model2a))
summary(model2a)
# Zero-inflated model
model2az <- glmmadmb(AB_coral ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model2az), resid(model2az))
summary(model2az)
# Compare fit with AIC
AIC(model2a, model2az)
model3a <- glmmadmb(AB_det ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, family = "nbinom")
plot(fitted(model3a), resid(model3a))
summary(model3a)
# Zero-inflated model
model3az <- glmmadmb(AB_det ~ heat * fp.cont.z + npp.max.z + poly(time.poly, 2) + lunar.sine.z + (1|site) + (1|observer),
data = ki_fish_sum, zeroInflation = TRUE, family = "nbinom")
plot(fitted(model3az), resid(model3az))
summary(model3az)
# Compare fit with AIC
AIC(model3a, model3az)
# Compare fit with AIC
AIC(model2a, model2az) # The zero-inflated model provides a better fit for the corallivores.
